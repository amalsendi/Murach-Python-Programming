#!/usr/bin/env python3

def display_menu(): # Definition of the "display_menu() function" that displays the name of the "Movie List 2D program" as well as the "Command Menu" with its coresonding commands below for the user to select from. 
    print("The Movie List 2D program")
    print()
    print("COMMAND MENU")
    print("list - List all movies")
    print("add -  Add a movie")
    print("del -  Delete a movie")
    print("find - Find movies by year")
    print("exit - Exit program")
    print()    

def list(movie_list): #Definition of the "list() function" that has a list called "movie_list" passed to it in its call statement.  
    if len(movie_list) == 0: # Use of an "if statement" that checks the condition of the "len() function" with "movie_list" as its argument to see whether the value is "equal to" 0. Also, the use of this "if statement" checks if the value is either "True or False".   
        print("There are no movies in the list.\n") # Here, you have the executiion of the "print() function" that prints a message to the console because the condition of the "if statement" holds a "True" value. Therefore, the value is "equal(==) to" 0.
        return # A return statement that returns the result of the calculation to the calling statement of the "list() function".
    else: # Use of an "else clause" that checks the condition of the "len() function" with the "movie_list" as its argument to see whether the value is "equal to" 0. Also, the use of this "if statement" checks if the value is either "True or False". Because the value is "False" the statements after this condition will be executed as follows. 
        i = 0 # An integer variable named "i" that's assigned a value of "0". This integer variable helps to properly number each row of movies in a list of lists also known as a "two dimensional list". The result of this will have the list(row) of movies being numbered in sequence starting from "1." on the console. 
        for movie in movie_list: # Use of a "for loop" that goes through the larger list "movie_list" function using the smaller list "movie" set as an argument to execute the "list() function".
            row = movie # Assignment of the list "movie" as the value to the "row" variable. In other words, the "number of rows" in the list will equal to the number of "movies listed" from the list "movie_list".
            print(str(i + 1) + ". " + row[0]
                  + " (" + str(row[1]) + ")"
                  + " @ " + str(row[2])) # Here, you have the executiion of the "print() function" that displays the list of movies to the Python console that includes the name of the movie, year of movie, and price of the movie all as a "strings" because the condition of the "if statement" holds a "False" value. Therefore, the value the "len(movie_list) function" is "not equal(!=) to" 0. Also, this string uses "row indexes": 0, 1 and 2 to get the "name of the movie", "year" and "price of the movie" respectively. Note: This part of the function, (str(i + 1) + ". "  is read as the str(variable i = 0 plus 1) is converted to a "string". This is done by the str() function that converts the integers to string values that says str(0+1) or str(1) + ". " is just displayed as (1.) on the Python console with the help of the "print() function". Remember, the lists in this program are "all strings" that have integers and floats in them in which they are all converted to "strings" with the help of the "str() function". This is important because you can't join integers, floats and strings without converting the integers and floats into "strings" first. Finally, another thing to know is: With (str(i + 1), don't plug in the statement (i += 1) because that's not what it's used for, and it will confuse you in getting the wrong answer as to how the list are numbered. So keep (str(i + 1) and the statement "i += 1" separate when reading and figuring out the code calculation.  
            i += 1 # Use of a "+=" assignment operator to add 1 to the integer variable (i) that corresponds to the "row" variable with the help of the "for loop" execution where it numbers each row of the list from 1 to 4. This is because it loops 4 times since there are 4 rows of lists in the list "movie_list". In other words, this statement can be read as: There are "4 names of movies" going through the "for loop statement" exactly 4 times in which you'll have exactly "4 rows of movies listed" onto the Python console. Thus, the rows(list) of movie names is listed in sequence as 1. 2. 3. and 4. on the Python console screen as "strings" because there are uses of the "str() function" converting integers into "string values" for each movie in the list "movie_list". Special note: A better understanding for how this "for loop" works is to look at the first part of the "print() function": str(i + 1) in which you add up the values in this call statement first before it's converted to a "string" value. This is understood by starting with the initial integer variable value "i = 0" and use this value in str(i+1) as this will represent the "first row of movies" in the list of list. It will now become str(0+1)= str(1), or 1. as this is displayed as a "string" on the Python console. "1." represents the first list(row) of lists in the list "movie_list". Now i = 1 as this represents the "second row of movies" in the list of lists. Next, recognizing that there are 4 rows in the list, the "for loop" executes the function again to the second row of the list. So it takes str(i + 1) which becomes str(1+1)= str(2) or 2. as this is displayed as a "string" on the Python console. "2." now represents the second list(row) of lists in the list "movie_list". From here, i = 2 as this represents the "third row of movies" in the list of lists. Again, the "for loop" executes the function to the third row and it takes str(i + 1) which becomes str(2+1)= str(3) or 3. as this is displayed as a "string" on the Python console. "3." now represents the third list(row) of lists in the list "movie_list". Finally, i = 3 as this represents the "fourth row of movies" in the list of lists. So now, the "for loop" executes the function for the last time to the fourth row and it takes str(i + 1) which becomes str(3+1)= str(4) or 4. as this is displayed as a "string" on the Python console. "4." now represents the fourth list(row) of lists in the list "movie_list". Last, that's how this "for loop" works for this function.    
        print() # Prints blank line to the console. 

def add(movie_list): # Definition of the "add() function" that adds a new movie(list) to the end of the list "movie_list". 
    name = input("Name: ") # Use of the "input() function" that prompts the user to enter data such as the "name of a movie" from the list.
    year = input("Year: ") # Use of the "input() function" that prompts the user to enter data such as the "year" to find all movies that were released in that particular year from the list.
    price = input("Price: ") #Use of the "input() function" that prompts the user to enter data such as the "price of a movie" from the list. Note: Any data you enter at the prompt is always returned as a "string" value due to the use of the "input() function". 
    movie = [] # Creation of an empty list named "movie". 
    movie.append(name) # Use of the "append() function" to add the movie name to the movie list.
    movie.append(year) # Use of the "append() function" to add the year to the movie list.
    movie.append(price) # Use of the "append() function" to add the price to the movie list. 
    movie_list.append(movie) # Use of the "append() function" to add movie to "movie_list". 
    print(movie[0] + " was added.\n") # Use of the "print() function" to display on the Python console the name of the movie at index 0 from the list "movie" was added.
    
def delete(movie_list): # Definition of the "delete() function" that deletes a movie at the specified index(number) that you enter in the "Number:" prompt that's displayed on the Python console. 
    number = int(input("Number: ")) # The variable "number" that uses the "input() function" as its argument in the call statement of the "int() function". In other words, this is a chain function that takes the number entry from the prompt and converts this "string" into an "integer" when promted on the Python console for the "Number:" entry. 
    if number < 1 or number > len(movie_list): # An "if statement" that uses the "or" logical operator to evaluate both Boolean(conditional) expressions with the help of the "< and >" relational operators that evaluates to either a "True or False" value. 
        print("Invalid movie number.\n") # A print() function" that displays the message "Invalid movie number" onto the Python console after the user enters a number less than 1 or greater than 4 from the "del" option in the command menu. This lets the user know that any numbers selected outside this range won't allow them to delete the selected movie from the list "movie_list". Last, the display of this message to the Python console lets you know that the evaluation of the Boolean(conditional) expressions hold a "True" value.  
    else: # Use of an "else clause" that checks the Boolean(conditional) expressions of both the variable "number" and of the len() function" with the list "movie_list" as its argument to check whether if "number" is less than 1 or if "number" is greater than the length of the list "movie_list". Because the value is "False" the statements after this condition will be executed as follows. 
        movie = movie_list.pop(number-1) # The variable "movie" assigned to a value within the range of 1-4 that corresponds to removing a list(row) that's numbered between 1 and 4 on the Python consolde from the list "movie_list" with the help of the "pop() function". Also, in this function, "movie_list.pop(number-1)": in the part (number-1), think of it as "movie_list.pop(1-1)" or "movie_list.pop(0)" in which the result removes the first "numbered list(row)" of the list "movie_list" on the Python console. Another example is, "movie_list.pop(4-1)" or "movie_list.pop(3)" in which this result removes the fourth "numbered list(row)" of the list "movie_list" on the Python console. In a way, this makes sense because when you look at the part of the function, "movie_list.pop(0)" all this is saying that Python recognizes rows and columns starting at index 0. So knowing this, the deletion of the list can been seen as deleting row[0] and row[3] in the list "movie_list" removes the "first" and "fourth" lists(rows) respectively on the Python console.
        print(movie[0] + " was deleted.\n") # A print() function" that displays the message "Name of movie at index 0" was deleted from the Python console after the user enters a number less greater than 1 or less than 4 from the "del" option in the command menu. This lets the user know that any numbers selected inside this range will allow them to delete the selected movie from the list "movie_list". Last, the display of this message to the Python console lets you know that the evaluation of the Boolean(conditional) expressions hold a "False" value.  

def find_by_year(movie_list): # Definition of the find_by_year() function that lists all of the movies that were released in a particular year that the user requests(enters) as an entry on the Python console. 
    year = int(input("Year: ")) # Use of the "input() function" that prompts the user to enter data such as the "year" to find all movies that were released in that particular year from the list. Here, you have the variable "year" assigned to an integer value from the user's entry in the "Year" prompt on the Python console. Then this entry is later converted to a "string" value as the final result when it lists all the movies that were released in that particular year.  
    for movie in movie_list: # Use of a "for loop" that goes through the larger list "movie_list" function using the smaller list "movie" set as an argument to execute the "find_by_year() function".
        if movie[1] == year: # An "if statement" that evaluates the Boolean(conditional) expression with the help of the "equal to(==)" relational operator that evaluates to either a "True or False" value. 
            print(movie[0] + " was released in " + str(year)) # A print() function" that displays the message "the name of the movie at index 0 was released in the "string"(of particular year) onto the Python console after the user enters a year from the list "movie_list" after the "find" option was selected from the "Command" prompt in the "Command Menu". This lets the user know that any year selected inside the list "movie_list" will be allowed to be displayed selected on the Python console.  Last, the display of this message to the Python console lets you know that the evaluation of the Boolean(conditional) expression holds a "True" value.  
    print() # Use of the "print() function" that prints a blank line on the Python console. 

def main(): # Definition of the "main() function that calls on the "display_menu() function" and using the list "movie_list".
    movie_list = [["Monty Python and the Holy Grail", 1975, 9.95], # Definition of the list "movie_list" which is a list of lists(two-dimensional list) that has 4 rows and 3 columns. Note: For this list, note that all the rows and columns are "strings" and is displayed as "strings" on the Python console. This is because all integers given in this list are converted to "string" values. It works because you can't join integers and string values without converting the specific integers into "strings". This is done with the help of the "str() function" from the "list() function" definition above. Last, for each list, it contains the name of the movie, the year when the movie was released and the price of the movie. 
                  ["On the Waterfront", 1954, 5.59],
                  ["Cat on a Hot Tin Roof", 1958, 7.95],
                  ["Gone with the Wind", 1939, 14.95]]
    
    display_menu() # Calling of the "display_menu() function" that executes a while loop.
    while True: # Use of a while statement that always evaluates the Boolean expression to a "True" value. This "while statement" also starts an "infinite while loop" that executes and runs the statements below it forever unless a "break statement" is executed.       
        command = input("Command: ") # The variable "command" that's assigned the value of the "input() function" that displays a prompt, "Command" on the Python console waiting for the user to make an entry based on the options from the "if/elif statements" below which evaluate the results of the Boolean(conditional) expressions that uses the "equal to(==)" relational operators.  
        if command == "list": # Selection of the entry if the user inputs "list" on the Python console.
            list(movie_list) # Calls on the "list() function" if the user selects "list" from the Python console. 
        elif command == "add": # Selection of the entry if the user inputs "add" on the Python console.
            add(movie_list) # Calls on the "add() function" if the user selects "add" from the Python console. 
        elif command == "del": # Selection of the entry if the user inputs "del" on the Python console.
            delete(movie_list) # Calls on the "delete() function" if the user selects "del" from the Python console. 
        elif command == "find": # Selection of the entry if the user inputs "find" on the Python console.
            find_by_year(movie_list) # Calls on the "find_by_year() function" if user selects "find" from the Python console. 
        elif command == "exit": # Selection of the entry if the user inputs "exit" on the Python console.
            break # Use of a "break statement" that breaks(exits) out of the "infinite while loop" execution to jump into the "next statement" that follows the loop.  
        else: # Use of an "else clause" that is the next statement that follows the break an the infinite while loop. Also the use of this clause signifies that the evaluation of the Boolean expression is a "False" value. Thus, the last "print() function" below this else clause will be executed displaying the message "Bye" onto the Python console as follows.  
            print("Not a valid command. Please try again.\n") # Use of a "print() function" that displays this message if the user makes an entry of a command that doesn't exist during the "Command" prompt from the "Command Menu" on the Python console. 
    print("Bye!") # Use of the "print() function" that displays the message, "Bye" onto the Python console. This also means the break out of the infinite while loop. You can tell this by the "indentation" of this "print function" lining up(matching) with the "infinite while loop statement" above it. Finally, this message is only displayed after the user selects "exit" as an entry during the "Command" prompt from the "Command Menu" on the Python console. 

if __name__ == "__main__": # Use of an "if statement" that checks the Boolean(conditional) expression if this module is the mmain module.
    main() # Calls the "main() function"


#Reference pages for this exercise includes: 34, 35(for review on "assigning values to variables" and "setting values to variables" after it was initially assigned)
#Pages 44 and 45(for review on converting numbers to strings)
#Pages 52 and 53(for review on the "input() function")
#Pages 84, 85(for review on while statements), 86, 87(for review on "for loops" and using an "integer variable" as "i" to set the argument in motion for the "range() function". Note: See the "sum_of_numbers" example.
#Pages 88, and 89(for review on break statements)
#Pages 104, 105(for review on defining and calling functions)
#Pages 106 and 107(for review on defining and calling the "main() function")    
#Pages 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, and 179. 
